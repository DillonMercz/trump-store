{"version":3,"file":"static/js/63.08aeae8a.chunk.js","mappings":"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","sources":["pages/Checkout.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Container,\n  Grid,\n  Typography,\n  Box,\n  Paper,\n  Stepper,\n  Step,\n  StepLabel,\n  Button,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Radio,\n  RadioGroup,\n  FormControl,\n  FormLabel,\n  Divider,\n  Alert,\n  Card,\n  CardContent,\n} from '@mui/material';\nimport {\n  LocalShipping,\n  Payment,\n  CheckCircleOutline,\n} from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\n\nconst steps = ['Shipping', 'Payment', 'Confirmation'];\n\n// Mock cart data - in a real app, this would come from a cart context/redux store\nconst cartItems = [\n  {\n    id: 1,\n    name: 'Premium MAGA Cap',\n    price: 39.99,\n    quantity: 1,\n  },\n  {\n    id: 2,\n    name: 'Patriot Elite Polo',\n    price: 59.99,\n    quantity: 2,\n  },\n];\n\nconst ShippingForm = ({ formData, setFormData, handleNext }) => {\n  const [errors, setErrors] = useState({});\n\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.firstName) newErrors.firstName = 'First name is required';\n    if (!formData.lastName) newErrors.lastName = 'Last name is required';\n    if (!formData.address) newErrors.address = 'Address is required';\n    if (!formData.city) newErrors.city = 'City is required';\n    if (!formData.state) newErrors.state = 'State is required';\n    if (!formData.zip) newErrors.zip = 'ZIP code is required';\n    if (!formData.email) newErrors.email = 'Email is required';\n    if (!formData.phone) newErrors.phone = 'Phone number is required';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm()) {\n      handleNext();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"First Name\"\n            value={formData.firstName}\n            onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n            error={!!errors.firstName}\n            helperText={errors.firstName}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"Last Name\"\n            value={formData.lastName}\n            onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n            error={!!errors.lastName}\n            helperText={errors.lastName}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            fullWidth\n            label=\"Address\"\n            value={formData.address}\n            onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n            error={!!errors.address}\n            helperText={errors.address}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"City\"\n            value={formData.city}\n            onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n            error={!!errors.city}\n            helperText={errors.city}\n          />\n        </Grid>\n        <Grid item xs={12} sm={3}>\n          <TextField\n            required\n            fullWidth\n            label=\"State\"\n            value={formData.state}\n            onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n            error={!!errors.state}\n            helperText={errors.state}\n          />\n        </Grid>\n        <Grid item xs={12} sm={3}>\n          <TextField\n            required\n            fullWidth\n            label=\"ZIP Code\"\n            value={formData.zip}\n            onChange={(e) => setFormData({ ...formData, zip: e.target.value })}\n            error={!!errors.zip}\n            helperText={errors.zip}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"Email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n            error={!!errors.email}\n            helperText={errors.email}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"Phone\"\n            value={formData.phone}\n            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n            error={!!errors.phone}\n            helperText={errors.phone}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={formData.saveAddress}\n                onChange={(e) => setFormData({ ...formData, saveAddress: e.target.checked })}\n                color=\"primary\"\n              />\n            }\n            label=\"Save this address for future orders\"\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            size=\"large\"\n          >\n            Continue to Payment\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nconst PaymentForm = ({ formData, setFormData, handleNext, handleBack }) => {\n  const [errors, setErrors] = useState({});\n\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.cardName) newErrors.cardName = 'Cardholder name is required';\n    if (!formData.cardNumber) newErrors.cardNumber = 'Card number is required';\n    if (!formData.expDate) newErrors.expDate = 'Expiration date is required';\n    if (!formData.cvv) newErrors.cvv = 'CVV is required';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm()) {\n      handleNext();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Payment Method</FormLabel>\n            <RadioGroup\n              value={formData.paymentMethod}\n              onChange={(e) => setFormData({ ...formData, paymentMethod: e.target.value })}\n            >\n              <FormControlLabel\n                value=\"credit\"\n                control={<Radio />}\n                label=\"Credit Card\"\n              />\n              <FormControlLabel\n                value=\"debit\"\n                control={<Radio />}\n                label=\"Debit Card\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            fullWidth\n            label=\"Cardholder Name\"\n            value={formData.cardName}\n            onChange={(e) => setFormData({ ...formData, cardName: e.target.value })}\n            error={!!errors.cardName}\n            helperText={errors.cardName}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            fullWidth\n            label=\"Card Number\"\n            value={formData.cardNumber}\n            onChange={(e) => setFormData({ ...formData, cardNumber: e.target.value })}\n            error={!!errors.cardNumber}\n            helperText={errors.cardNumber}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"Expiration Date\"\n            placeholder=\"MM/YY\"\n            value={formData.expDate}\n            onChange={(e) => setFormData({ ...formData, expDate: e.target.value })}\n            error={!!errors.expDate}\n            helperText={errors.expDate}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"CVV\"\n            value={formData.cvv}\n            onChange={(e) => setFormData({ ...formData, cvv: e.target.value })}\n            error={!!errors.cvv}\n            helperText={errors.cvv}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={formData.saveCard}\n                onChange={(e) => setFormData({ ...formData, saveCard: e.target.checked })}\n                color=\"primary\"\n              />\n            }\n            label=\"Save this card for future purchases\"\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: 2 }}>\n            <Button\n              variant=\"outlined\"\n              onClick={handleBack}\n              sx={{ flex: 1 }}\n              size=\"large\"\n            >\n              Back\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              sx={{ flex: 1 }}\n              size=\"large\"\n            >\n              Place Order\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nconst Confirmation = ({ navigate }) => (\n  <Box sx={{ textAlign: 'center', py: 4 }}>\n    <CheckCircleOutline sx={{ fontSize: 64, color: 'success.main', mb: 2 }} />\n    <Typography variant=\"h4\" gutterBottom>\n      Thank you for your order!\n    </Typography>\n    <Typography color=\"text.secondary\" paragraph>\n      Your order has been placed successfully. We'll send you an email confirmation shortly.\n    </Typography>\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={() => navigate('/')}\n      sx={{ mt: 2 }}\n    >\n      Continue Shopping\n    </Button>\n  </Box>\n);\n\nconst OrderSummary = () => {\n  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  const shipping = subtotal >= 50 ? 0 : 5.99;\n  const tax = subtotal * 0.08;\n  const total = subtotal + shipping + tax;\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Order Summary\n        </Typography>\n        {cartItems.map((item) => (\n          <Box\n            key={item.id}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              mb: 1,\n            }}\n          >\n            <Typography variant=\"body2\">\n              {item.name} (x{item.quantity})\n            </Typography>\n            <Typography variant=\"body2\">\n              ${(item.price * item.quantity).toFixed(2)}\n            </Typography>\n          </Box>\n        ))}\n        <Divider sx={{ my: 2 }} />\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n          <Typography>Subtotal</Typography>\n          <Typography>${subtotal.toFixed(2)}</Typography>\n        </Box>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n          <Typography>Shipping</Typography>\n          <Typography>{shipping === 0 ? 'Free' : `$${shipping.toFixed(2)}`}</Typography>\n        </Box>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n          <Typography>Tax</Typography>\n          <Typography>${tax.toFixed(2)}</Typography>\n        </Box>\n        <Divider sx={{ my: 2 }} />\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\">Total</Typography>\n          <Typography variant=\"h6\" color=\"primary\">\n            ${total.toFixed(2)}\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Checkout = () => {\n  const navigate = useNavigate();\n  const [activeStep, setActiveStep] = useState(0);\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    address: '',\n    city: '',\n    state: '',\n    zip: '',\n    email: '',\n    phone: '',\n    saveAddress: false,\n    paymentMethod: 'credit',\n    cardName: '',\n    cardNumber: '',\n    expDate: '',\n    cvv: '',\n    saveCard: false,\n  });\n\n  const handleNext = () => {\n    setActiveStep((prevStep) => prevStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevStep) => prevStep - 1);\n  };\n\n  const getStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return <ShippingForm formData={formData} setFormData={setFormData} handleNext={handleNext} />;\n      case 1:\n        return (\n          <PaymentForm\n            formData={formData}\n            setFormData={setFormData}\n            handleNext={handleNext}\n            handleBack={handleBack}\n          />\n        );\n      case 2:\n        return <Confirmation navigate={navigate} />;\n      default:\n        throw new Error('Unknown step');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Paper sx={{ p: 4 }}>\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n          Checkout\n        </Typography>\n        <Stepper activeStep={activeStep} sx={{ py: 4 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        <Box sx={{ mt: 4 }}>\n          <Grid container spacing={4}>\n            <Grid item xs={12} md={8}>\n              {getStepContent(activeStep)}\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <OrderSummary />\n              <Alert\n                icon={<LocalShipping />}\n                severity=\"info\"\n                sx={{ mt: 2 }}\n              >\n                Free shipping on orders over $50\n              </Alert>\n              <Alert\n                icon={<Payment />}\n                severity=\"info\"\n                sx={{ mt: 2 }}\n              >\n                Secure payment processing\n              </Alert>\n            </Grid>\n          </Grid>\n        </Box>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Checkout;\n"],"names":["steps","cartItems","id","name","price","quantity","ShippingForm","_ref","formData","setFormData","handleNext","errors","setErrors","useState","_jsx","onSubmit","e","preventDefault","validateForm","newErrors","firstName","lastName","address","city","state","zip","email","phone","Object","keys","length","children","_jsxs","Grid","container","spacing","item","xs","sm","TextField","required","fullWidth","label","value","onChange","target","error","helperText","type","FormControlLabel","control","Checkbox","checked","saveAddress","color","Button","variant","size","PaymentForm","_ref2","handleBack","cardName","cardNumber","expDate","cvv","FormControl","component","FormLabel","RadioGroup","paymentMethod","Radio","placeholder","saveCard","Box","sx","display","justifyContent","gap","onClick","flex","Confirmation","_ref3","navigate","textAlign","py","CheckCircleOutline","fontSize","mb","Typography","gutterBottom","paragraph","mt","OrderSummary","subtotal","reduce","sum","shipping","tax","total","Card","CardContent","map","toFixed","Divider","my","Checkout","useNavigate","activeStep","setActiveStep","prevStep","Container","maxWidth","Paper","p","align","Stepper","Step","StepLabel","md","step","Error","getStepContent","Alert","icon","LocalShipping","severity","Payment"],"sourceRoot":""}